if (isDebug) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
//每个使用kotlin的module都需要添加下面三行配置
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        //组件化里，资源通常要以module名为前缀，防止合并多个module时资源冲突
        resourcePrefix "a_"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        if(isDebug){
            applicationId "com.example.module_a"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //kotlin直接使用控件id，略去自己手动findViewBindId的麻烦
    //每个使用该功能的module都需要配置
    androidExtensions {
        experimental = true
    }

    //组建化配置：isDebug为true时，module能变成一个独立调试的app
    //src/main/debug下面是为调试添加的代码
    sourceSets {
        main {
            if (isDebug) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
                java.srcDirs = ['src/main/java', 'src/main/debug/java']
                res.srcDirs = ['src/main/res', 'src/main/debug/res']
                res.srcDirs += ['src/main/debug/res']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除src/main/debug文件夹下的所有文件
                    exclude 'src/main/debug/**'
                }
            }
        }
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':base')

    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //每个使用到dagger的module都需要添加下面两行配置
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    //ARouter
    kapt 'com.alibaba:arouter-compiler:1.2.1'
    api 'com.alibaba:arouter-api:1.4.0'

}
